Single Responsibility Principle (SRP)
Каждый класс или модуль должен выполнять только одну конкретную задачу, что даст четкое понимание функционала и
и позволит вносить изменения в логику не опасаясь за возможные ошибки в других функциях

Open/Closed Principle (OCP)
Мы писали класс который считает площадь фигуры, к примеру квадрата, но для того что бы посчитать площадь прямоугольника нам не нужно вносить 
изменения в код, а только расширить функциональность существующего - это и есть ОСР

Liskov Substitution Principle (LSP)
Возвращаясь к нашим фигурам, если функция считающая площадь квадрата может посчитать и площадь прямоугольника
путем изменения длинны одной из сторон, то это можно назвать принципом LSP, а если функция принимает только одну длину стороны,
то здесь принцип LSP не работает.

Interface Segregation Principle (ISP)
Пример с интернет магазином - я могу посмотреть отдельно только ту категорию товаров и с теми характеристиками которые мне интересны, 
а не перебирать все имеющиеся товары. 


Dependency Inversion Principle (DIP)
Этот принцип говорит нам что об универсальности, мы не должны привязываться к конкретной модели, а использовать общие принципы работы этой модели.
К примеру, что бы установить магнитолу в автомобиль, нам не важно какой марки этот автомобиль и какой модели эта магнитола.

